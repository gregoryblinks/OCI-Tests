import io
import json
import oci
import datetime
import os
import logging

def handler(ctx, data: io.BytesIO = None):
    try:
        # Decode safely
        raw_body = data.getvalue().decode("utf-8") if data else "{}"
        event = json.loads(raw_body) if raw_body else {}
        logging.getLogger().info("Event received: %s", event)

        finding_id = event.get("id", "unknown_finding")
        timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%SZ")

        # Ensure bucket name is set
        bucket_name = os.getenv("BUCKET_NAME")
        if not bucket_name:
            raise ValueError("BUCKET_NAME environment variable not set")

        # Use resource principal signer
        signer = oci.auth.signers.get_resource_principals_signer()
        object_storage = oci.object_storage.ObjectStorageClient(config={}, signer=signer)
        namespace = object_storage.get_namespace().data

        # ---- NEW: Check if bucket exists in compartment ----
        compartment_id = os.getenv("COMPARTMENT_OCID")  # Set this in function config
        if not compartment_id:
            raise ValueError("COMPARTMENT_OCID environment variable not set")

        buckets = object_storage.list_buckets(namespace, compartment_id).data
        bucket_names = [b.name for b in buckets]
        logging.getLogger().info("Namespace: %s", namespace)
        logging.getLogger().info("Buckets in compartment: %s", bucket_names)

        if bucket_name not in bucket_names:
            msg = f"Bucket {bucket_name} NOT found in compartment {compartment_id}"
            logging.getLogger().error(msg)
            return msg

        # ---- If bucket exists, proceed with save ----
        object_name = f"{timestamp}_{finding_id}.json"
        object_storage.put_object(
            namespace,
            bucket_name,
            object_name,
            json.dumps(event, indent=2)
        )

        msg = f"Saved finding {finding_id} to bucket {bucket_name} as {object_name}"
        logging.getLogger().info(msg)
        return msg

    except Exception as e:
        logging.getLogger().error("Error processing event: %s", str(e))
        return f"Error: {str(e)}"
